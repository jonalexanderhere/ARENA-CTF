generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  alias        String       @unique // max 32 chars
  password     String       // max 128 chars
  name         String       // max 48 chars
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  teamId       String?
  isTeamLeader Boolean      @default(false)
  isAdmin      Boolean      @default(false)
  submissions  Submission[]
  scores       Score[]
  team         Team?        @relation(fields: [teamId], references: [id])
}

model Team {
  id          String        @id @default(cuid())
  name        String        @unique // max 32 chars
  code        String        @unique // max 12 chars
  icon        String        @default("GiSpaceship")
  color       String        @default("#ffffff")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  score       Int           @default(0)
  ActivityLog ActivityLog[]
  submissions Submission[]
  scores      Score[]
  teamHints   TeamHint[]
  members     User[]
  pointHistory TeamPointHistory[]
}

model Challenge {
  id               String            @id @default(cuid())
  title            String
  description      String
  points           Int
  flag             String?
  flags            ChallengeFlag[]
  multipleFlags    Boolean           @default(false)
  category         String
  difficulty       String
  isActive         Boolean           @default(true)
  isLocked         Boolean           @default(false)
  link             String?           // Optional link field for challenges
  solveExplanation String?           // Optional explanation shown after solving
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  unlockConditions UnlockCondition[]
  files            ChallengeFile[]
  hints            Hint[]
  submissions      Submission[]
  scores           Score[]
}

model Submission {
  id            String         @id @default(cuid())
  flag          String
  isCorrect     Boolean
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  challengeId   String
  flagId        String?
  teamId        String
  team          Team           @relation(fields: [teamId], references: [id])
  challenge     Challenge      @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id])
  challengeFlag ChallengeFlag? @relation(fields: [flagId], references: [id])

  @@index([challengeId])
  @@index([flagId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLog {
  id          String   @id @default(cuid())
  type        String
  description String
  teamId      String?
  createdAt   DateTime @default(now())
  team        Team?    @relation(fields: [teamId], references: [id])
}

model GameConfig {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChallengeFile {
  id          String    @id @default(cuid())
  name        String
  path        String
  size        Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model Hint {
  id          String     @id @default(cuid())
  content     String
  cost        Int        @default(0)
  challengeId String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  challenge   Challenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  teamHints   TeamHint[]
}

model TeamHint {
  id        String   @id @default(cuid())
  teamId    String
  hintId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hint      Hint     @relation(fields: [hintId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, hintId])
}

model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

model Score {
  id          String    @id @default(cuid())
  points      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  teamId      String
  challengeId String
  team        Team      @relation(fields: [teamId], references: [id])
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@index([teamId])
  @@index([userId])
  @@index([challengeId])
}

enum UnlockConditionType {
  CHALLENGE_SOLVED
  TIME_REMAINDER // Unlocks when time remaining is LESS than the threshold
}

model UnlockCondition {
  id            String              @id @default(cuid())
  challengeId   String
  challenge     Challenge           @relation(fields: [challengeId], references: [id], onDelete: Cascade) // Add onDelete Cascade
  type          UnlockConditionType
  // Fields specific to condition type
  requiredChallengeId String?           // For CHALLENGE_SOLVED (ID of challenge that must be solved)
  timeThresholdSeconds Int?             // For TIME_REMAINDER (e.g., 3600 for 1 hour remaining)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([challengeId])
  @@index([requiredChallengeId]) // Index potential foreign key
}

// Add new model for challenge flags
model ChallengeFlag {
  id          String    @id @default(cuid())
  flag        String
  points      Int
  challengeId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@index([challengeId])
}

model TeamPointHistory {
  id          String    @id @default(cuid())
  teamId      String
  points      Int       // The point change (positive or negative)
  totalPoints Int       // The team's total points after this change
  reason      String    // e.g., "HINT_PURCHASE", "CHALLENGE_SOLVE"
  metadata    String?   // Additional JSON data about the change
  createdAt   DateTime  @default(now())
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([createdAt])
}
